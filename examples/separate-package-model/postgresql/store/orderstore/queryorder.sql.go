// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queryorder.sql

package orderstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"postgres-separate-package-model/models"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "content"."order" (
          number, user_id, created_at
) VALUES (
  $1, $2, $3
)
RETURNING id, number, user_id, created_at
`

type CreateOrderParams struct {
	Number    string
	UserID    uuid.UUID
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (models.ContentOrder, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.Number, arg.UserID, arg.CreatedAt)
	var i models.ContentOrder
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM "content"."order"
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, number, user_id, created_at FROM "content"."order"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (models.ContentOrder, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i models.ContentOrder
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, number, user_id, created_at FROM "content"."order"
ORDER BY number
`

func (q *Queries) ListOrders(ctx context.Context) ([]models.ContentOrder, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.ContentOrder
	for rows.Next() {
		var i models.ContentOrder
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
